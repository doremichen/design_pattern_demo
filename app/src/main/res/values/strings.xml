<resources>
    <string name="app_name">DesignPatternDemo</string>
    <string name="title_activity_main">MainActivity</string>
    <string name="action_settings">Settings</string>
    <!-- title string-->
    <string name="title_demo_test">Hello world</string>
    <string name="title_demo_singleton">Demo singleton pattern</string>
    <string name="title_demo_factory">Demo factory pattern</string>
    <string name="title_demo_abstract_factory">Demo abstract factory pattern</string>
    <string name="title_demo_template">Demo template method pattern</string>
    <string name="title_demo_builder">Demo builder pattern</string>
    <string name="title_demo_proxy">Demo proxy pattern</string>
    <string name="title_demo_prototype">Demo prototype pattern</string>
    <string name="title_demo_mediator">Demo mediator pattern</string>
    <string name="title_demo_command">Demo command pattern</string>
    <string name="title_demo_chain_of_responsibility">Demo chain of responsibility pattern</string>
    <string name="title_demo_decorator">Demo decorator pattern</string>
    <string name="title_demo_strategy">Demo strategy pattern</string>
    <string name="title_demo_adapter">Demo adapter pattern</string>
    <string name="title_demo_iterator">Demo iterator pattern</string>
    <string name="title_demo_composite">Demo composite pattern</string>
    <string name="title_demo_observer">Demo observer pattern</string>
    <string name="title_demo_facade">Demo facade pattern</string>
    <string name="title_demo_memento">Demo memento pattern</string>
    <string name="title_demo_visitor">Demo visitor pattern</string>
    <string name="title_demo_state">Demo state pattern</string>
    <string name="title_demo_interpreter">Demo interpreter pattern</string>
    <string name="title_demo_flyweight">Demo flyweight pattern</string>
    <string name="title_demo_bridge">Demo bridge pattern</string>


    <string name="tv_welcome_to_demo">Welcome to demo design pattern</string>
    <string name="tv_no_data">No item</string>
    <string name="toast_error_occurred_while_parsing_itemdata_xml">Error occurred while parsing itemData.xml</string>
    <string name="demo_singleton_instruction">Singleton is a design pattern that ensures that only one entity in the world is available. \n\nWe will show its effect shortly.</string>
    <string name="btn_start_singleton">Start</string>
    <string name="btn_get_singleton_object">Get Singleton object</string>
    <string name="title_activity_demo_singleton_main">Demo singleton pattern</string>
    <string name="singleton_result_init_1">Each time the button is pressed, Singleton.getInstance() is called\n</string>
    <string name="singleton_result_init_2">Let\'s see if the ID changes?\n\n</string>
    <string name="singleton_result_log_1">"Generate a singleton object! "</string>
    <string name="demo_factory_instruction">Factory Pattern\n\nProvides a way to create objects without specifying the exact class of object that will be created.\n\nIn this demo, we will create different types of characters using a factory.</string>
    <string name="btn_start_factory">Start</string>
    <string name="btn_factory_create_character">Create Character</string>
    <string name="btn_back_to_main_list">Back to Main List</string>
    <string name="title_activity_demo_factory_main">Demo factory pattern</string>
    <string name="factory_result_character">"Character: "</string>
    <string name="factory_result_special_ability">"Special Ability: "</string>
    <string name="demo_abstract_factory_instruction">Abstract Factory Pattern provides an interface for creating families of related or dependent objects without specifying their concrete classes.</string>
    <string name="btn_start_abstract_factory">Start</string>
    <string name="title_abstract_factory">Demo abstract factory pattern</string>
    <string name="btn_generate_components">Generate Components</string>
    <string name="toast_error_no_item_selected">No item select!!!</string>
    <string name="dark_theme">Dark Theme</string>
    <string name="light_theme">Light Theme</string>
    <string name="toast_error_bit_flip">Bit flip!!!</string>
    <string name="abstract_factory_result_button">"Button: "</string>
    <string name="abstract_factory_result_text">"Text: "</string>
    <string name="demo_template_instruction">Template Method Pattern is a behavioral design pattern that defines the skeleton of an algorithm in a method, deferring some steps to subclasses.\n\nThis pattern allows subclasses to redefine certain steps of an algorithm without changing its overall structure.\n\nIn this demo, we simulate a data export scenario. The user can select different export formats (CSV or JSON). Based on the selection, the system calls the corresponding subclass implementation and uses a template method to execute:\n\n• openFile()\\n\n• writeHeader()\\n\n• writeData()\\n\n• closeFile()\n\nThe order of operations is defined by the template method exportData(), while each format subclass provides its specific implementation for each step.\n\nPress \"Start Demo\" to explore how Template Method Pattern controls the flow of logic with flexible subclass behavior.\n</string>
    <string name="btn_start_template">Start</string>
    <string name="title_template_method_pattern">Template Method Pattern</string>
    <string name="btn_template_run_export">Run Export</string>
    <string name="demo_builder_instruction">Builder Pattern: Step-by-step construction of complex objects. Allows different representations using the same construction code.</string>
    <string name="btn_start_builder">START</string>
    <string name="btn_builder_create_computer">Create Computer</string>
    <string name="cp_info_cpu">"CPU: "</string>
    <string name="cp_info_ram">" RAM: "</string>
    <string name="cp_info_hdd">" HDD: "</string>
    <string name="cp_info_gpu">" GPU: "</string>
    <string name="demo_builder_result_init_info">Result will be shown here.</string>
    <string name="cb_demo_builder_add_cpu">Add CPU</string>
    <string name="cb_demo_builder_add_ram">Add RAM</string>
    <string name="cb_demo_builder_add_storage">Add Storage</string>
    <string name="cb_demo_builder_add_gpu">Add GPU</string>
    <string name="demo_proxy_description">Please press start demo button to see the result</string>
    <string name="btn_demo_proxy_start_demo">Start Demo</string>
    <string name="demo_proxy_result_init_info">Result log will show here...</string>
    <string name="demo_proxy_instruction">Proxy Pattern provides a surrogate or placeholder for another object to control access to it. \nIn this demo, the proxy delays creation of the real video player and logs the access.</string>
    <string name="btn_demo_prototype_clone_character">Clone Character</string>
    <string name="demo_prototype_instruction">
        "Prototype Pattern allows objects to be cloned instead of created from scratch. This is useful when object creation is expensive, or you want to avoid dependencies on concrete classes.\n"
        "\n"
        "Key benefits:\n"
        "- Avoids the overhead of new object creation\n"
        "- Simplifies object initialization\n"
        "- Useful for object registries and GUI editors\n"
        "\n"
        "In this demo, you'll see how to clone an existing character template using the `clone()` method and customize it without affecting the original.\n"
    </string>
    <string name="demo_mediator_hint_type_a_message">Type a message</string>
    <string name="btn_demo_mediator_send">Send</string>
    <string name="demo_mediator_hint_enter_your_name">Enter your name</string>
    <string name="demo_mediator_hint_enter_your_message">Enter your message</string>
    <string name="demo_mediator_instruction">
        "This demo demonstrates the Mediator Pattern by simulating a chat room where users send messages through a mediator.\n"
        "\n"
        "The ChatRoom (mediator) manages message delivery, so users do not communicate directly with each other. This reduces tight coupling between components.\n" +
        "\n"
        "Try selecting a user, typing a message, and sending it. You'll see that other users receive the message through the ChatRoom mediator.\n"
    </string>
    <string name="toast_please_enter_your_name_and_message">Please enter your name and message</string>
    <string name="demo_mediator_receive_message">" receive message: "</string>
    <string name="demo_mediator_from">" from "</string>
    <string name="demo_command_instruction">
        "This demo showcases the Command Pattern using a simple light switch.\n"
        "The toggle switch represents a command trigger, allowing the user to turn a light ON or OFF.\n"
        "\n"
        "- Receiver: Light\n"
        "- Commands: LightOnCommand, LightOffCommand\n"
        "- Invoker: RemoteControl\n"
        "- Client: UI Switch interacts with RemoteControl"
        "The command encapsulates the action, enabling decoupling between sender and receiver."
    </string>
    <string name="demo_command_title_command_pattern_demo">Command Pattern Demo</string>
    <string name="demo_command_light_switch">Light Switch</string>
    <string name="demo_chain_instruction">"This demo illustrates the Chain of Responsibility Pattern.\n\n"
        "A support request is passed along a chain of handlers:\n"
        "- LowLevelSupport handles simple issues.\n"
        "- MidLevelSupport handles intermediate issues.\n"
        "- HighLevelSupport handles complex or unhandled issues.\n\n"
        "Each handler decides whether it can process the request or pass it to the next one.\n\n"
        "Usage:\n"
        "1. Enter a request (e.g., \"password reset\", \"database issue\", \"network crash\").\n"
        "2. Click \"Send Request\".\n"
        "3. The system will display which handler processed your request.\n"
    </string>
    <string name="demo_chain_et_hint_enter_your_support_request">Enter your support request</string>
    <string name="demo_chain_btn_send_request">Send Request</string>
    <string name="demo_chain_handled_by_low_level_support">Handled by Low-Level Support</string>
    <string name="demo_chain_request_could_not_be_handled">Request could not be handled</string>
    <string name="demo_chain_handled_by_mid_level_support">Handled by Mid-Level Support</string>
    <string name="demo_chain_handled_by_high_level_support">Handled by High-Level Support</string>
    <string name="demo_chain_unhandled_request">Unhandled request</string>
    <string name="demo_decorator_instruction">"This demo illustrates the Decorator Pattern.\n\n"
        "The Decorator Pattern allows you to dynamically add new behavior to objects without modifying their structure.\n\n"
        "We start with a basic Coffee object and wrap it with additional decorators like Milk, Sugar, and Vanilla.\n\n"
        "Usage:\n"
        "1. Select ingredients to decorate your coffee.\n"
        "2. Press the \"Make Coffee\" button.\n"
        "3. The app will display the coffee description and total cost."
    </string>
    <string name="demo_decorator_simple_coffee">Simple coffee</string>
    <string name="demo_decorator_milk">, Milk</string>
    <string name="demo_decorator_sugar">, Sugar</string>
    <string name="demo_decorator_vanilla">, Vanilla</string>
    <string name="demo_decorator_chb_add_milk">Add Milk</string>
    <string name="demo_decorator_chb_add_sugar">Add Sugar</string>
    <string name="demo_decorator_chb_add_vanilla">Add Vanilla</string>
    <string name="demo_decorator_btn_make_coffee">Make Coffee</string>
    <string name="demo_decorator_coffee_info_result">Coffee info: %1$s\nTotal cost: $%2$.2f</string>
    <string name="strategy_description">"Strategy Pattern lets you define a family of algorithms, encapsulate each one and make them interchangeable.\n"
        "Strategy lets the algorithm vary independently from clients that use it.\n\n"
        "In this demo, you can choose different discount strategies for a given price:\n"
        "• No Discount\n"
        "• Seasonal Discount (10%)\n"
        "• Clearance Discount (50%)\n\n"
        "Enter a price, select a strategy, and press \"Calculate\" to see the final price."
    </string>
    <string name="demo_strategy_hint_enter_price">Enter price</string>
    <string name="label_no_discount">No Discount</string>
    <string name="label_seasonal_discount">Seasonal (10%)</string>
    <string name="label_clearance_discount">Clearance (50%)</string>
    <string name="demo_strategy_btn_calculate">Calculate</string>
    <string name="demo_adapter_instruction">
        "Adapter Pattern allows incompatible interfaces to work together.\n"
        "    In this example, we have a legacy player that only supports MP3.\n"
        "    We use an Adapter to play MP3, MP4, and VLC files via the same interface."
    </string>
    <string name="demo_adapter_hint_enter_filename">Enter filename</string>
    <string name="demo_adapter_btn_play">Play</string>
    <string name="demo_adapter_result_log">Result log...</string>
    <string name="demo_iterator_instruction">
        "Iterator Pattern provides a way to access elements of a collection sequentially without exposing its underlying representation.\n"
        "\n"
        "In this demo:\n"
        "- We have a collection of fruit items.\n"
        "- By pressing \"Show Items\", we use an Iterator to traverse the collection.\n"
        "- The iterator follows a simple pattern: hasNext() to check if more items exist, and next() to get the next item.\n"
        "\n"
        "This demonstrates how to decouple traversal logic from the collection structure.\n"
        "\n"
        "Usage:\n"
        "1. Tap \"Show Items\" to view the list of items via the Iterator.\n"
        "2. Observe how the logic does not rely on direct list access (no get(index)).\n"
        "\n"
        "This pattern is useful for designing APIs that expose iteration without revealing implementation details."
    </string>
    <string name="demo_iterator_btn_show_items">Show Items</string>
    <string name="demo_iterator_tv_items_will_be_listed_here">Items will be listed here...</string>
    <string name="demo_composite_instruction">
        "The Composite Pattern allows clients to treat individual objects and compositions of objects uniformly.\n"
        "\n"
        "In this demo:\n"
        "- We model a folder structure where a folder can contain files and subfolders.\n"
        "- Each item implements a common interface with the `display()` method.\n"
        "\n"
        "By clicking \"Build Structure\", we build a sample folder hierarchy and display its contents.\n"
        "\n"
        "This pattern is useful for:\n"
        "- Tree structures (like file systems)\n"
        "- Organizational hierarchies\n"
        "- UI component trees\n"
        "\n"
        "Usage:\n"
        "1. Tap \"Build Structure\".\n"
        "2. Observe how both files and folders are processed uniformly via the `display()` method."
    </string>
    <string name="demo_composite_btn_build_structure">Build Structure</string>
    <string name="demo_observer_instruction">
        "The Observer Pattern defines a one-to-many dependency between objects so that when one object changes state, all its dependents are notified and updated automatically.\n"
        "\n"
        "In this demo:\n"
        "- A Subject holds data (e.g. temperature).\n"
        "- Observers register to receive updates when the Subject changes.\n"
        "- When you update the value, all Observers display the change.\n"
        "\n"
        "Usage:\n"
        "1. Tap \"Update Temperature\".\n"
        "2. Observe how multiple UI components are notified of the change."
    </string>
    <string name="demo_observer_et_hint_enter_temperature">Enter temperature</string>
    <string name="demo_observer_btn_update_temperature">Update Temperature</string>
    <string name="demo_observer_tv_observer_1">Observer 1: -- %1$s</string>
    <string name="demo_observer_tv_observer_2">Observer 2: -- %1$s</string>
    <string name="toast_error_empty_temperature">Empty tempearture! Please input the non empty value!</string>
    <string name="demo_facade_instruction">
        "The Facade Pattern provides a simplified interface to a complex subsystem.\n"
        "\n"
        "    In this demo, we simulate a music player. Internally, it involves:\n"
        "    - Decoding the music file\n"
        "    - Loading buffers\n"
        "    - Outputting audio to speakers\n"
        "\n"
        "    The UI only interacts with the Facade class which handles all the underlying complexity."
    </string>
    <string name="demo_facade_decoding_song">"Decoding song: "</string>
    <string name="demo_facade_buffer_loaded_successfully">Buffer loaded successfully.</string>
    <string name="demo_facade_audio_output_started">Now playing audio through speaker.</string>
    <string name="demo_facade_et_hint_enter_song_name">Enter song name</string>
    <string name="demo_facade_btn_play_song">Play Song</string>
    <string name="demo_facade_tv_log">Log:</string>
    <string name="demo_memento_instruction">
        "Memento Pattern allows saving and restoring the internal state of an object without violating encapsulation.\n"
        "\n"
        "In this demo:\n"
        "- You can input some text and press [Save] to store the current state.\n"
        "- Press [Undo] to revert the text back to the last saved state.\n"
        "\n"
        "It's useful in situations like Undo/Redo operations in editors."
    </string>
    <string name="demo_memento_et_hint_enter_text">Enter text...</string>
    <string name="demo_memento_btn_save">Save</string>
    <string name="demo_memento_btn_undo">Undo</string>
    <string name="demo_memento_tv_state_log_will_show_here">State log will show here.</string>
    <string name="demo_memento_state_log_save_success">State saved: %1$s</string>
    <string name="demo_memento_state_log_undo_success">State restored: %1$s</string>
    <string name="demo_memento_state_log_undo_fail">No save state</string>
    <string name="demo_vistor_instruction">
        "The Visitor Pattern lets you add new operations to existing object structures \n"
        "without modifying those structures.\n"
        "\n"
        "It separates algorithms from the objects on which they operate, enabling:\n"
        "- Open/Closed Principle: Add new operations without altering existing class logic.\n"
        "- Flexibility: You can define multiple visitors for different purposes.\n"
        "\n"
        "In this demo, we will apply multiple visitors to shape objects:\n"
        "1. AreaCalculatorVisitor – to calculate area\n"
        "2. DrawingVisitor – to simulate rendering text"
    </string>
    <string name="demo_visitor_btn_run_visitor_demo">Run Visitor Demo</string>
    <string name="demo_visitor_circle_area">"Circle area: "</string>
    <string name="demo_visitor_rectangle_area">"Rectangle area: "</string>
    <string name="demo_visitor_draw_circle_with_radius">"Draw circle with radius "</string>
    <string name="demo_visitor_draw_rectangle">"Draw rectangle "</string>
    <string name="demo_visitor_x">" x "</string>
    <string name="demo_visitor_draw_visitor">Draw Visitor</string>
    <string name="demo_visitor_area_visitor">Area Visitor</string>
    <string name="demo_state_instruction">
        "The State Pattern allows an object to change its behavior when its internal state changes. \n"
        "It appears as if the object changed its class.\n"
        "\n"
        "In this demo, we simulate a music player that can be in three states:\n"
        "- Stopped\n"
        "- Playing\n"
        "- Paused\n"
        "\n"
        "Each button changes the state, and behavior depends on the current state.";
    </string>
    <string name="demo_state_switching_to_playing">Switching to Playing...</string>
    <string name="demo_state_already_stopped_can_t_pause">Already stopped. Can\'t pause.</string>
    <string name="demo_state_already_stopped">Already stopped.</string>
    <string name="demo_state_already_playing">Already playing.</string>
    <string name="demo_state_pausing_music">Pausing music...</string>
    <string name="demo_state_stopping_playback">Stopping playback...</string>
    <string name="demo_state_resuming_playback">Resuming playback...</string>
    <string name="demo_state_already_paused">Already paused.</string>
    <string name="demo_state_stopping_from_pause">Stopping from pause...</string>
    <string name="demo_state_tv_current_state">Current State: %1$s</string>
    <string name="demo_state_btn_play">Play</string>
    <string name="demo_state_btn_pause">Pause</string>
    <string name="demo_state_btn_stop">Stop</string>
    <string name="demo_interpreter_instruction">
        "This demo showcases the Interpreter Pattern applied to arithmetic expression evaluation.\n"
        "\n"
        "Supported features:\n"
        "• Basic arithmetic operations:, -, *, /\n"
        "• Parentheses for grouping: ()\n"
        "• Left-to-right evaluation\n"
        "• Integer-only calculation\n"
        "\n"
        "Example expressions:\n"
        "• 3 5 * 2\n"
        "• (4 6) / 2 - 1\n"
        "• 10 - (3 2) * 2\n"
        "\n"
        "Instructions:\n"
        "1. Enter an arithmetic expression in the input field.\n"
        "2. Press \"Evaluate\" to see the result calculated using Interpreter logic.\n"
        "3. Only spaces between tokens are required (e.g., \"3 5\", not \"3+5\").\n"
        "\n"
        "Note:\n"
        "This is a simplified interpreter for demonstration purposes. No floating-point or variable support.";
    </string>
    <string name="demo_interpreter_et_hint_enter_expression_e_g_5_3_2_1">Enter expression (e.g. 5 + 3 * ( 2 + 1 ))</string>
    <string name="demo_interpreter_btn_evaluate">Evaluate</string>
    <string name="demo_interpreter_tv_result_will_appear_here">Result will appear here</string>
    <string name="demo_interpreter_error_invalid_expression">Error: Invalid expression.</string>
    <string name="demo_interpreter_simple_calculate">Simple calculate: (+/-)</string>
    <string name="demo_flyweight_instruction">
        "The Flyweight Pattern is a structural design pattern that allows sharing of common parts of object state to reduce memory usage.\\n\\n\n"
        "In this demo, we simulate drawing chess pieces (black or white) on a board. Instead of creating a new object every time, we use a factory to reuse shared instances of black and white pieces.\\n\\n\n"
        "This helps improve performance and conserve memory, especially when dealing with a large number of similar objects.\\n\\n\n"
        "Tap the \"Add Piece\" button to simulate placing pieces on the board and observe that only two instances (black and white) are ever created, regardless of how many you add.\n"
    </string>
    <string name="demo_flyweight_btn_place_piece">Place Piece</string>
    <string name="demo_bridge_instruction">
        "Bridge Pattern\n"
        "\n"
        "The Bridge Pattern is a structural design pattern that decouples an abstraction from its implementation so that the two can vary independently.\n"
        "\n"
        "In this demo, we demonstrate a remote control (the abstraction) that can operate on different devices (the implementation), such as a TV or a Radio.\n"
        "\n"
        "This pattern allows you to extend either the remote or the device independently without modifying the other.\n"
        "\n"
        "Select a device type.\n"
        "Use the toggle and volume buttons to control the device.\n"
        "Observe how the abstraction (Remote) communicates with the device (TV or Radio)."
    </string>
    <string name="demo_bridge_tv_is">"TV is "</string>
    <string name="demo_bridge_on">ON</string>
    <string name="demo_bridge_off">OFF</string>
    <string name="demo_bridge_volume">", Volume: "</string>
    <string name="demo_bridge_radio_is">"Radio is "</string>
    <string name="demo_bridge_btn_toggle_power">Toggle Power</string>
    <string name="demo_bridge_btn_volume_plus">Volume +</string>
    <string name="demo_bridge_btn_volume_minus">Volume -</string>
    <string name="demo_factory_type_hero">hero</string>
    <string name="demo_factory_type_mage">mage</string>
    <string name="demo_factory_type_archer">archer</string>
    <string-array name="character_types">
        <item>@string/demo_factory_type_hero</item>
        <item>@string/demo_factory_type_mage</item>
        <item>@string/demo_factory_type_archer</item>
    </string-array>
    <string-array name="factory_types">
        <item>Dark Theme</item>
        <item>Light Theme</item>
    </string-array>
    <string-array name="exporter_types">
        <item>CSV</item>
        <item>JSON</item>
    </string-array>
    <string-array name="strategy_types">
        <item>@string/label_no_discount</item>
        <item>@string/label_seasonal_discount</item>
        <item>@string/label_clearance_discount</item>
    </string-array>
    <string-array name="media_formats">
        <item>mp3</item>
        <item>mp4</item>
        <item>vlc</item>
    </string-array>
    <string-array name="visitor_type_options">
        <item>@string/demo_visitor_area_visitor</item>
        <item>@string/demo_visitor_draw_visitor</item>
    </string-array>
    <string-array name="piece_colors">
        <item>Black</item>
        <item>White</item>
    </string-array>
    <string-array name="bridge_devices">
        <item>TV</item>
        <item>Radio</item>
    </string-array>

</resources>