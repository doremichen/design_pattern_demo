<resources>
    <string name="app_name">DesignPatternDemo</string>
    <string name="title_activity_main">MainActivity</string>
    <string name="large_text">
        "Material is the metaphor.\n\n"

        "A material metaphor is the unifying theory of a rationalized space and a system of motion."
        "The material is grounded in tactile reality, inspired by the study of paper and ink, yet "
        "technologically advanced and open to imagination and magic.\n"
        "Surfaces and edges of the material provide visual cues that are grounded in reality. The "
        "use of familiar tactile attributes helps users quickly understand affordances. Yet the "
        "flexibility of the material creates new affordances that supercede those in the physical "
        "world, without breaking the rules of physics.\n"
        "The fundamentals of light, surface, and movement are key to conveying how objects move, "
        "interact, and exist in space and in relation to each other. Realistic lighting shows "
        "seams, divides space, and indicates moving parts.\n\n"

        "Bold, graphic, intentional.\n\n"

        "The foundational elements of print based design typography, grids, space, scale, color, "
        "and use of imagery guide visual treatments. These elements do far more than please the "
        "eye. They create hierarchy, meaning, and focus. Deliberate color choices, edge to edge "
        "imagery, large scale typography, and intentional white space create a bold and graphic "
        "interface that immerse the user in the experience.\n"
        "An emphasis on user actions makes core functionality immediately apparent and provides "
        "waypoints for the user.\n\n"

        "Motion provides meaning.\n\n"

        "Motion respects and reinforces the user as the prime mover. Primary user actions are "
        "inflection points that initiate motion, transforming the whole design.\n"
        "All action takes place in a single environment. Objects are presented to the user without "
        "breaking the continuity of experience even as they transform and reorganize.\n"
        "Motion is meaningful and appropriate, serving to focus attention and maintain continuity. "
        "Feedback is subtle yet clear. Transitions are efﬁcient yet coherent.\n\n"

        "3D world.\n\n"

        "The material environment is a 3D space, which means all objects have x, y, and z "
        "dimensions. The z-axis is perpendicularly aligned to the plane of the display, with the "
        "positive z-axis extending towards the viewer. Every sheet of material occupies a single "
        "position along the z-axis and has a standard 1dp thickness.\n"
        "On the web, the z-axis is used for layering and not for perspective. The 3D world is "
        "emulated by manipulating the y-axis.\n\n"

        "Light and shadow.\n\n"

        "Within the material environment, virtual lights illuminate the scene. Key lights create "
        "directional shadows, while ambient light creates soft shadows from all angles.\n"
        "Shadows in the material environment are cast by these two light sources. In Android "
        "development, shadows occur when light sources are blocked by sheets of material at "
        "various positions along the z-axis. On the web, shadows are depicted by manipulating the "
        "y-axis only. The following example shows the card with a height of 6dp.\n\n"

        "Resting elevation.\n\n"

        "All material objects, regardless of size, have a resting elevation, or default elevation "
        "that does not change. If an object changes elevation, it should return to its resting "
        "elevation as soon as possible.\n\n"

        "Component elevations.\n\n"

        "The resting elevation for a component type is consistent across apps (e.g., FAB elevation "
        "does not vary from 6dp in one app to 16dp in another app).\n"
        "Components may have different resting elevations across platforms, depending on the depth "
        "of the environment (e.g., TV has a greater depth than mobile or desktop).\n\n"

        "Responsive elevation and dynamic elevation offsets.\n\n"

        "Some component types have responsive elevation, meaning they change elevation in response "
        "to user input (e.g., normal, focused, and pressed) or system events. These elevation "
        "changes are consistently implemented using dynamic elevation offsets.\n"
        "Dynamic elevation offsets are the goal elevation that a component moves towards, relative "
        "to the component’s resting state. They ensure that elevation changes are consistent "
        "across actions and component types. For example, all components that lift on press have "
        "the same elevation change relative to their resting elevation.\n"
        "Once the input event is completed or cancelled, the component will return to its resting "
        "elevation.\n\n"

        "Avoiding elevation interference.\n\n"

        "Components with responsive elevations may encounter other components as they move between "
        "their resting elevations and dynamic elevation offsets. Because material cannot pass "
        "through other material, components avoid interfering with one another any number of ways, "
        "whether on a per component basis or using the entire app layout.\n"
        "On a component level, components can move or be removed before they cause interference. "
        "For example, a floating action button (FAB) can disappear or move off screen before a "
        "user picks up a card, or it can move if a snackbar appears.\n"
        "On the layout level, design your app layout to minimize opportunities for interference. "
        "For example, position the FAB to one side of stream of a cards so the FAB won’t interfere "
        "when a user tries to pick up one of cards.\n\n"
    </string>
    <string name="action_settings">Settings</string>
    <!-- title string-->
    <string name="title_demo_test">Hello world</string>
    <string name="title_demo_singleton">Demo singleton pattern</string>
    <string name="title_demo_factory">Demo factory pattern</string>
    <string name="title_demo_abstract_factory">Demo abstract factory pattern</string>
    <string name="title_demo_template">Demo template method pattern</string>
    <string name="title_demo_builder">Demo builder pattern</string>
    <string name="title_demo_proxy">Demo proxy pattern</string>
    <string name="title_demo_prototype">Demo prototype pattern</string>
    <string name="title_demo_mediator">Demo mediator pattern</string>
    <string name="title_demo_command">Demo command pattern</string>
    <string name="title_demo_chain_of_responsibility">Demo chain of responsibility pattern</string>
    <string name="title_demo_decorator">Demo decorator pattern</string>
    <string name="title_demo_strategy">Demo strategy pattern</string>
    <string name="title_demo_adapter">Demo adapter pattern</string>
    <string name="title_demo_iterator">Demo iterator pattern</string>
    <string name="title_demo_composite">Demo composite pattern</string>
    <string name="title_demo_observer">Demo observer pattern</string>
    <string name="title_demo_facade">Demo facade pattern</string>
    <string name="title_demo_memento">Demo memento pattern</string>"


    <string name="tv_welcome_to_demo">Welcome to demo design pattern</string>
    <string name="tv_no_data">No item</string>
    <string name="toast_error_occurred_while_parsing_itemdata_xml">Error occurred while parsing itemData.xml</string>
    <string name="singleton_description">Singleton is a design pattern that ensures that only one entity in the world is available. \n\nWe will show its effect shortly.</string>
    <string name="btn_start_singleton">Start</string>
    <string name="btn_get_singleton_object">Get Singleton object</string>
    <string name="title_activity_demo_singleton_main">Demo singleton pattern</string>
    <string name="singleton_result_init_1">Each time the button is pressed, Singleton.getInstance() is called\n</string>
    <string name="singleton_result_init_2">Let\'s see if the ID changes?\n\n</string>
    <string name="singleton_result_log_1">"Generate a singleton object! "</string>
    <string name="factory_description">Factory Pattern\n\nProvides a way to create objects without specifying the exact class of object that will be created.\n\nIn this demo, we will create different types of characters using a factory.</string>
    <string name="btn_start_factory">Start</string>
    <string name="btn_factory_create_character">Create Character</string>
    <string name="btn_back_to_main_list">Back to Main List</string>
    <string name="title_activity_demo_factory_main">Demo factory pattern</string>
    <string name="factory_result_character">"Character: "</string>
    <string name="factory_result_special_ability">"Special Ability: "</string>
    <string name="abstract_factory_description">Abstract Factory Pattern provides an interface for creating families of related or dependent objects without specifying their concrete classes.</string>
    <string name="btn_start_abstract_factory">Start</string>
    <string name="title_abstract_factory">Demo abstract factory pattern</string>
    <string name="btn_generate_components">Generate Components</string>
    <string name="toast_error_no_item_selected">No item select!!!</string>
    <string name="dark_theme">Dark Theme</string>
    <string name="light_theme">Light Theme</string>
    <string name="toast_error_bit_flip">Bit flip!!!</string>
    <string name="abstract_factory_result_button">"Button: "</string>
    <string name="abstract_factory_result_text">"Text: "</string>
    <string name="template_description">Template Method Pattern is a behavioral design pattern that defines the skeleton of an algorithm in a method, deferring some steps to subclasses.\n\nThis pattern allows subclasses to redefine certain steps of an algorithm without changing its overall structure.\n\nIn this demo, we simulate a data export scenario. The user can select different export formats (CSV or JSON). Based on the selection, the system calls the corresponding subclass implementation and uses a template method to execute:\n\n• openFile()\\n\n• writeHeader()\\n\n• writeData()\\n\n• closeFile()\n\nThe order of operations is defined by the template method exportData(), while each format subclass provides its specific implementation for each step.\n\nPress \"Start Demo\" to explore how Template Method Pattern controls the flow of logic with flexible subclass behavior.\n</string>
    <string name="btn_start_template">Start</string>
    <string name="title_template_method_pattern">Template Method Pattern</string>
    <string name="btn_template_run_export">Run Export</string>
    <string name="builder_description">Builder Pattern: Step-by-step construction of complex objects. Allows different representations using the same construction code.</string>
    <string name="btn_start_builder">START</string>
    <string name="btn_builder_create_computer">Create Computer</string>
    <string name="cp_info_cpu">"CPU: "</string>
    <string name="cp_info_ram">" RAM: "</string>
    <string name="cp_info_hdd">" HDD: "</string>
    <string name="cp_info_gpu">" GPU: "</string>
    <string name="demo_builder_result_init_info">Result will be shown here.</string>
    <string name="cb_demo_builder_add_cpu">Add CPU</string>
    <string name="cb_demo_builder_add_ram">Add RAM</string>
    <string name="cb_demo_builder_add_storage">Add Storage</string>
    <string name="cb_demo_builder_add_gpu">Add GPU</string>
    <string name="demo_proxy_description">Please press start demo button to see the result</string>
    <string name="btn_demo_proxy_start_demo">Start Demo</string>
    <string name="demo_proxy_result_init_info">Result log will show here...</string>
    <string name="demo_proxy_instruction">Proxy Pattern provides a surrogate or placeholder for another object to control access to it. \nIn this demo, the proxy delays creation of the real video player and logs the access.</string>
    <string name="btn_demo_prototype_clone_character">Clone Character</string>
    <string name="demo_prototype_instruction">
        "Prototype Pattern allows objects to be cloned instead of created from scratch. This is useful when object creation is expensive, or you want to avoid dependencies on concrete classes.\n"
        "\n"
        "Key benefits:\n"
        "- Avoids the overhead of new object creation\n"
        "- Simplifies object initialization\n"
        "- Useful for object registries and GUI editors\n"
        "\n"
        "In this demo, you'll see how to clone an existing character template using the `clone()` method and customize it without affecting the original.\n"
    </string>
    <string name="demo_mediator_hint_type_a_message">Type a message</string>
    <string name="btn_demo_mediator_send">Send</string>
    <string name="demo_mediator_hint_enter_your_name">Enter your name</string>
    <string name="demo_mediator_hint_enter_your_message">Enter your message</string>
    <string name="demo_mediator_instruction">
        "This demo demonstrates the Mediator Pattern by simulating a chat room where users send messages through a mediator.\n"
        "\n"
        "The ChatRoom (mediator) manages message delivery, so users do not communicate directly with each other. This reduces tight coupling between components.\n" +
        "\n"
        "Try selecting a user, typing a message, and sending it. You'll see that other users receive the message through the ChatRoom mediator.\n"
    </string>
    <string name="toast_please_enter_your_name_and_message">Please enter your name and message</string>
    <string name="demo_mediator_receive_message">" receive message: "</string>
    <string name="demo_mediator_from">" from "</string>
    <string name="demo_command_instruction">
        "This demo showcases the Command Pattern using a simple light switch.\n"
        "The toggle switch represents a command trigger, allowing the user to turn a light ON or OFF.\n"
        "\n"
        "- Receiver: Light\n"
        "- Commands: LightOnCommand, LightOffCommand\n"
        "- Invoker: RemoteControl\n"
        "- Client: UI Switch interacts with RemoteControl"
        "The command encapsulates the action, enabling decoupling between sender and receiver."
    </string>
    <string name="demo_command_title_command_pattern_demo">Command Pattern Demo</string>
    <string name="demo_command_light_switch">Light Switch</string>
    <string name="demo_chain_instruction">"This demo illustrates the Chain of Responsibility Pattern.\n\n"
        "A support request is passed along a chain of handlers:\n"
        "- LowLevelSupport handles simple issues.\n"
        "- MidLevelSupport handles intermediate issues.\n"
        "- HighLevelSupport handles complex or unhandled issues.\n\n"
        "Each handler decides whether it can process the request or pass it to the next one.\n\n"
        "Usage:\n"
        "1. Enter a request (e.g., \"password reset\", \"database issue\", \"network crash\").\n"
        "2. Click \"Send Request\".\n"
        "3. The system will display which handler processed your request.\n"
    </string>
    <string name="demo_chain_et_hint_enter_your_support_request">Enter your support request</string>
    <string name="demo_chain_btn_send_request">Send Request</string>
    <string name="demo_chain_handled_by_low_level_support">Handled by Low-Level Support</string>
    <string name="demo_chain_request_could_not_be_handled">Request could not be handled</string>
    <string name="demo_chain_handled_by_mid_level_support">Handled by Mid-Level Support</string>
    <string name="demo_chain_handled_by_high_level_support">Handled by High-Level Support</string>
    <string name="demo_chain_unhandled_request">Unhandled request</string>
    <string name="demo_decorator_instruction">"This demo illustrates the Decorator Pattern.\n\n"
        "The Decorator Pattern allows you to dynamically add new behavior to objects without modifying their structure.\n\n"
        "We start with a basic Coffee object and wrap it with additional decorators like Milk, Sugar, and Vanilla.\n\n"
        "Usage:\n"
        "1. Select ingredients to decorate your coffee.\n"
        "2. Press the \"Make Coffee\" button.\n"
        "3. The app will display the coffee description and total cost."
    </string>
    <string name="demo_decorator_simple_coffee">Simple coffee</string>
    <string name="demo_decorator_milk">, Milk</string>
    <string name="demo_decorator_sugar">, Sugar</string>
    <string name="demo_decorator_vanilla">, Vanilla</string>
    <string name="demo_decorator_chb_add_milk">Add Milk</string>
    <string name="demo_decorator_chb_add_sugar">Add Sugar</string>
    <string name="demo_decorator_chb_add_vanilla">Add Vanilla</string>
    <string name="demo_decorator_btn_make_coffee">Make Coffee</string>
    <string name="demo_decorator_coffee_info_result">Coffee info: %1$s\nTotal cost: $%2$.2f</string>
    <string name="strategy_description">"Strategy Pattern lets you define a family of algorithms, encapsulate each one and make them interchangeable.\n"
        "Strategy lets the algorithm vary independently from clients that use it.\n\n"
        "In this demo, you can choose different discount strategies for a given price:\n"
        "• No Discount\n"
        "• Seasonal Discount (10%)\n"
        "• Clearance Discount (50%)\n\n"
        "Enter a price, select a strategy, and press \"Calculate\" to see the final price."
    </string>
    <string name="demo_strategy_hint_enter_price">Enter price</string>
    <string name="label_no_discount">No Discount</string>
    <string name="label_seasonal_discount">Seasonal (10%)</string>
    <string name="label_clearance_discount">Clearance (50%)</string>
    <string name="demo_strategy_btn_calculate">Calculate</string>
    <string name="demo_adapter_instruction">
        "Adapter Pattern allows incompatible interfaces to work together.\n"
        "    In this example, we have a legacy player that only supports MP3.\n"
        "    We use an Adapter to play MP3, MP4, and VLC files via the same interface."
    </string>
    <string name="demo_adapter_hint_enter_filename">Enter filename</string>
    <string name="demo_adapter_btn_play">Play</string>
    <string name="demo_adapter_result_log">Result log...</string>
    <string name="demo_iterator_instruction">
        "Iterator Pattern provides a way to access elements of a collection sequentially without exposing its underlying representation.\n"
        "\n"
        "In this demo:\n"
        "- We have a collection of fruit items.\n"
        "- By pressing \"Show Items\", we use an Iterator to traverse the collection.\n"
        "- The iterator follows a simple pattern: hasNext() to check if more items exist, and next() to get the next item.\n"
        "\n"
        "This demonstrates how to decouple traversal logic from the collection structure.\n"
        "\n"
        "Usage:\n"
        "1. Tap \"Show Items\" to view the list of items via the Iterator.\n"
        "2. Observe how the logic does not rely on direct list access (no get(index)).\n"
        "\n"
        "This pattern is useful for designing APIs that expose iteration without revealing implementation details."
    </string>
    <string name="demo_iterator_btn_show_items">Show Items</string>
    <string name="demo_iterator_tv_items_will_be_listed_here">Items will be listed here...</string>
    <string name="demo_composite_instruction">
        "The Composite Pattern allows clients to treat individual objects and compositions of objects uniformly.\n"
        "\n"
        "In this demo:\n"
        "- We model a folder structure where a folder can contain files and subfolders.\n"
        "- Each item implements a common interface with the `display()` method.\n"
        "\n"
        "By clicking \"Build Structure\", we build a sample folder hierarchy and display its contents.\n"
        "\n"
        "This pattern is useful for:\n"
        "- Tree structures (like file systems)\n"
        "- Organizational hierarchies\n"
        "- UI component trees\n"
        "\n"
        "Usage:\n"
        "1. Tap \"Build Structure\".\n"
        "2. Observe how both files and folders are processed uniformly via the `display()` method."
    </string>
    <string name="demo_composite_btn_build_structure">Build Structure</string>
    <string name="demo_observer_instruction">
        "The Observer Pattern defines a one-to-many dependency between objects so that when one object changes state, all its dependents are notified and updated automatically.\n"
        "\n"
        "In this demo:\n"
        "- A Subject holds data (e.g. temperature).\n"
        "- Observers register to receive updates when the Subject changes.\n"
        "- When you update the value, all Observers display the change.\n"
        "\n"
        "Usage:\n"
        "1. Tap \"Update Temperature\".\n"
        "2. Observe how multiple UI components are notified of the change."
    </string>
    <string name="demo_observer_et_hint_enter_temperature">Enter temperature</string>
    <string name="demo_observer_btn_update_temperature">Update Temperature</string>
    <string name="demo_observer_tv_observer_1">Observer 1: -- %1$s</string>
    <string name="demo_observer_tv_observer_2">Observer 2: -- %1$s</string>
    <string name="toast_error_empty_temperature">Empty tempearture! Please input the non empty value!</string>
    <string name="demo_facade_instruction">
        "The Facade Pattern provides a simplified interface to a complex subsystem.\n"
        "\n"
        "    In this demo, we simulate a music player. Internally, it involves:\n"
        "    - Decoding the music file\n"
        "    - Loading buffers\n"
        "    - Outputting audio to speakers\n"
        "\n"
        "    The UI only interacts with the Facade class which handles all the underlying complexity."
    </string>
    <string name="demo_facade_decoding_song">"Decoding song: "</string>
    <string name="demo_facade_buffer_loaded_successfully">Buffer loaded successfully.</string>
    <string name="demo_facade_audio_output_started">Now playing audio through speaker.</string>
    <string name="demo_facade_et_hint_enter_song_name">Enter song name</string>
    <string name="demo_facade_btn_play_song">Play Song</string>
    <string name="demo_facade_tv_log">Log:</string>
    <string name="demo_memento_instruction">
        "Memento Pattern allows saving and restoring the internal state of an object without violating encapsulation.\n"
        "\n"
        "In this demo:\n"
        "- You can input some text and press [Save] to store the current state.\n"
        "- Press [Undo] to revert the text back to the last saved state.\n"
        "\n"
        "It's useful in situations like Undo/Redo operations in editors."
    </string>
    <string name="demo_memento_et_hint_enter_text">Enter text...</string>
    <string name="demo_memento_btn_save">Save</string>
    <string name="demo_memento_btn_undo">Undo</string>
    <string name="demo_memento_tv_state_log_will_show_here">State log will show here.</string>
    <string name="demo_memento_state_log_save_success">State saved: %1$s</string>
    <string name="demo_memento_state_log_undo_success">State restored: %1$s</string>
    <string name="demo_memento_state_log_undo_fail">No save state</string>
    <string-array name="character_types">
        <item>Hero</item>
        <item>Mage</item>
        <item>Archer</item>
    </string-array>
    <string-array name="factory_types">
        <item>Dark Theme</item>
        <item>Light Theme</item>
    </string-array>
    <string-array name="exporter_types">
        <item>CSV</item>
        <item>JSON</item>
    </string-array>
    <string-array name="strategy_types">
        <item>@string/label_no_discount</item>
        <item>@string/label_seasonal_discount</item>
        <item>@string/label_clearance_discount</item>
    </string-array>
    <string-array name="media_formats">
        <item>mp3</item>
        <item>mp4</item>
        <item>vlc</item>
    </string-array>

</resources>